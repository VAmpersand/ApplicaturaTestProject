/// This file is generated by Weaver 0.12.3
/// DO NOT EDIT!
import Alamofire
import CoreData
import Foundation
import SnapKit
import UIKit
// MARK: - CityWeatherViewModel
protocol CityWeatherViewModelDependencyResolver {
    var cityData: CityData { get }
}
final class CityWeatherViewModelDependencyContainer: CityWeatherViewModelDependencyResolver {
    let cityData: CityData
    init(cityData: CityData) {
        self.cityData = cityData
    }
}
// MARK: - AddCityScene
protocol AddCitySceneDependencyResolver {
    var parentRouter: Router { get }
    var addCityRouter: AddCityRouter { get }
    var addCityViewModel: AddCityViewModel { get }
    var addCityController: AddCityController { get }
}
final class AddCitySceneDependencyContainer: AddCitySceneDependencyResolver {
    let parentRouter: Router
    var addCityRouter: AddCityRouter {
        let value = AddCityRouter()
        return value
    }
    var addCityViewModel: AddCityViewModel {
        let value = AddCityViewModel()
        return value
    }
    var addCityController: AddCityController {
        let value = AddCityController()
        return value
    }
    init(parentRouter: Router) {
        self.parentRouter = parentRouter
    }
}
// MARK: - CityWeatherScene
protocol CityWeatherSceneDependencyResolver {
    var parentRouter: Router { get }
    var cityData: CityData { get }
    var cityWeatherRouter: CityWeatherRouter { get }
    func cityWeatherViewModel(cityData: CityData) -> CityWeatherViewModel
    var cityWeatherController: CityWeatherController { get }
}
final class CityWeatherSceneDependencyContainer: CityWeatherSceneDependencyResolver {
    let parentRouter: Router
    let cityData: CityData
    var cityWeatherRouter: CityWeatherRouter {
        let value = CityWeatherRouter()
        return value
    }
    func cityWeatherViewModel(cityData: CityData) -> CityWeatherViewModel {
        let dependencies = CityWeatherViewModelDependencyContainer(cityData: cityData)
        let value = CityWeatherViewModel(injecting: dependencies)
        return value
    }
    var cityWeatherController: CityWeatherController {
        let value = CityWeatherController()
        return value
    }
    init(parentRouter: Router, cityData: CityData) {
        self.parentRouter = parentRouter
        self.cityData = cityData
    }
}
// MARK: - WeatherTableRouter
protocol WeatherTableRouterDependencyResolver {
    func addCityScene(parentRouter: Router) -> AddCityScene
    func cityWeatherScene(parentRouter: Router, cityData: CityData) -> CityWeatherScene
}
final class WeatherTableRouterDependencyContainer: WeatherTableRouterDependencyResolver {
    func addCityScene(parentRouter: Router) -> AddCityScene {
        let dependencies = AddCitySceneDependencyContainer(parentRouter: parentRouter)
        let value = AddCityScene(injecting: dependencies)
        return value
    }
    func cityWeatherScene(parentRouter: Router, cityData: CityData) -> CityWeatherScene {
        let dependencies = CityWeatherSceneDependencyContainer(parentRouter: parentRouter, cityData: cityData)
        let value = CityWeatherScene(injecting: dependencies)
        return value
    }
    init() {
    }
}
// MARK: - WeatherTableScene
protocol WeatherTableSceneDependencyResolver {
    var parentRouter: Router { get }
    var weatherTableRouter: WeatherTableRouter { get }
    var weatherTableViewModel: WeatherTableViewModel { get }
    var weatherTableController: WeatherTableController { get }
}
final class WeatherTableSceneDependencyContainer: WeatherTableSceneDependencyResolver {
    let parentRouter: Router
    var weatherTableRouter: WeatherTableRouter {
        let value = WeatherTableRouter(injecting: WeatherTableRouterDependencyContainer())
        return value
    }
    var weatherTableViewModel: WeatherTableViewModel {
        let value = WeatherTableViewModel()
        return value
    }
    var weatherTableController: WeatherTableController {
        let value = WeatherTableController()
        return value
    }
    init(parentRouter: Router) {
        self.parentRouter = parentRouter
    }
}
// MARK: - MainRouter
protocol MainRouterDependencyResolver {
    func weatherTableScene(parentRouter: Router) -> WeatherTableScene
}
final class MainRouterDependencyContainer: MainRouterDependencyResolver {
    func weatherTableScene(parentRouter: Router) -> WeatherTableScene {
        let dependencies = WeatherTableSceneDependencyContainer(parentRouter: parentRouter)
        let value = WeatherTableScene(injecting: dependencies)
        return value
    }
    init() {
    }
}
// MARK: - SceneDelegate
protocol SceneDelegateDependencyResolver {
    var mainRouter: MainRouter { get }
}
final class SceneDelegateDependencyContainer: SceneDelegateDependencyResolver {
    private var _mainRouter: MainRouter?
    var mainRouter: MainRouter {
        if let value = _mainRouter { return value }
        let value = MainRouter(injecting: MainRouterDependencyContainer())
        _mainRouter = value
        return value
    }
    init() {
        _ = mainRouter
    }
}